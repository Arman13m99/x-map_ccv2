# ci.yml - Continuous Integration Pipeline for Tapsi Food Map Dashboard
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Code quality and security checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || echo "No dev requirements found"
        pip install bandit safety flake8 black isort mypy pytest-cov
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
    
    - name: Code style check (flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Type checking (mypy)
      run: mypy . --ignore-missing-imports || echo "Type checking completed with warnings"
    
    - name: Security scan (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Dependency security check (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgis/postgis:14-3.2
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_tapsi_food_map
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_tapsi_food_map
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        # Create test database schema
        python -c "
        from database import DatabaseManager
        import os
        os.environ['DATABASE_URL'] = 'postgresql://test_user:test_password@localhost:5432/test_tapsi_food_map'
        db = DatabaseManager()
        db.create_tables()
        print('Test database initialized')
        "
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_tapsi_food_map
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_tapsi_food_map
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        pytest tests/integration/ -v --cov-append --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          .coverage

  # Docker build and security scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: tapsi-food-map:ci-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
    
    - name: Test Docker image
      run: |
        # Test image can start
        docker run --rm -d --name test-app \
          -e DATABASE_URL=sqlite:///tmp/test.db \
          -e SECRET_KEY=test-key \
          -p 5000:5000 \
          tapsi-food-map:ci-${{ github.sha }}
        
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        
        # Cleanup
        docker stop test-app
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: tapsi-food-map:ci-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Hadolint (Dockerfile linter)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
    
    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  # Helm chart validation
  helm-validation:
    name: Helm Chart Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0
    
    - name: Install kubeval
      run: |
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin
    
    - name: Lint Helm chart
      run: |
        helm lint deployment/helm/
    
    - name: Validate Kubernetes manifests with kubeval
      run: |
        helm template tapsi-food-map deployment/helm/ | kubeval
    
    - name: Test Helm chart with different values
      run: |
        # Test with production values
        helm template tapsi-food-map deployment/helm/ -f deployment/helm/values-prod.yaml | kubeval
        
        # Test with staging values
        helm template tapsi-food-map deployment/helm/ -f deployment/helm/values-staging.yaml | kubeval
    
    - name: Generate Helm docs
      run: |
        # Install helm-docs
        curl -L https://github.com/norwoodj/helm-docs/releases/latest/download/helm-docs_1.11.0_Linux_x86_64.tar.gz | tar xz
        sudo mv helm-docs /usr/local/bin
        
        # Generate documentation
        helm-docs deployment/helm/
    
    - name: Upload Helm artifacts
      uses: actions/upload-artifact@v3
      with:
        name: helm-artifacts
        path: |
          deployment/helm/README.md

  # Performance and load testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgis/postgis:14-3.2
        env:
          POSTGRES_USER: perf_user
          POSTGRES_PASSWORD: perf_password
          POSTGRES_DB: perf_tapsi_food_map
        ports:
          - 5432:5432
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and run application
      run: |
        docker build -t tapsi-food-map:perf .
        docker run -d --name perf-app \
          -e DATABASE_URL=postgresql://perf_user:perf_password@localhost:5432/perf_tapsi_food_map \
          -e REDIS_URL=redis://localhost:6379/0 \
          -e SECRET_KEY=perf-test-key \
          -p 5000:5000 \
          --network host \
          tapsi-food-map:perf
        
        # Wait for application to start
        sleep 30
        curl -f http://localhost:5000/health
    
    - name: Install performance testing tools
      run: |
        # Install k6 for load testing
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run load tests
      run: |
        # Create k6 test script
        cat > load-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export const options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 50 },
            { duration: '2m', target: 0 },
          ],
          thresholds: {
            http_req_duration: ['p(95)<2000'],
            http_req_failed: ['rate<0.02'],
          },
        };
        
        export default function() {
          const response = http.get('http://localhost:5000/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 2s': (r) => r.timings.duration < 2000,
          });
          sleep(1);
        }
        EOF
        
        k6 run --out json=performance-results.json load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # Final CI status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build, helm-validation]
    if: always()
    
    steps:
    - name: Check CI status
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Helm Validation: ${{ needs.helm-validation.result }}"
        
        if [ "${{ needs.code-quality.result }}" != "success" ] || \
           [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.docker-build.result }}" != "success" ] || \
           [ "${{ needs.helm-validation.result }}" != "success" ]; then
          echo "❌ CI pipeline failed"
          exit 1
        else
          echo "✅ CI pipeline passed successfully"
        fi
    
    - name: Notify success
      if: success()
      run: echo "🎉 All CI checks passed! Ready for deployment."