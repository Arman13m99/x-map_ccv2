# app-deployment.yaml - Main application deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tapsi-app
  namespace: tapsi-food-map
  labels:
    app.kubernetes.io/name: tapsi-app
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: tapsi-food-map
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: tapsi-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tapsi-app
        app.kubernetes.io/component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/health/metrics"
    spec:
      containers:
      - name: tapsi-app
        image: tapsi-food-map:latest
        ports:
        - containerPort: 5000
          name: http
        envFrom:
        - configMapRef:
            name: tapsi-app-config
        - secretRef:
            name: tapsi-app-secrets
        env:
        - name: DATABASE_URL
          value: "postgresql://$(DB_USERNAME):$(DB_PASSWORD)@postgres-service:5432/$(DB_NAME)"
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: app-data
          mountPath: /app/data
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: app-service
  namespace: tapsi-food-map
  labels:
    app.kubernetes.io/name: tapsi-app
    app.kubernetes.io/component: application
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5000"
    prometheus.io/path: "/health/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: tapsi-app

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data-pvc
  namespace: tapsi-food-map
  labels:
    app.kubernetes.io/name: tapsi-app
    app.kubernetes.io/component: application
spec:
  accessModes:
  - ReadWriteMany  # Multiple pods need access
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tapsi-app-hpa
  namespace: tapsi-food-map
  labels:
    app.kubernetes.io/name: tapsi-app
    app.kubernetes.io/component: application
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tapsi-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60