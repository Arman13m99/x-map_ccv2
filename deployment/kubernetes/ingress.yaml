# ingress.yaml - Kubernetes Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tapsi-app-ingress
  namespace: tapsi-food-map
  labels:
    app.kubernetes.io/name: tapsi-app-ingress
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: tapsi-food-map
  annotations:
    # Nginx ingress controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS settings
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # SSL certificate (adjust based on your cert-manager setup)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Connection and timeout settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    
    # Buffer settings for large responses
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
spec:
  tls:
  - hosts:
    - tapsi-food-map.yourdomain.com
    - www.tapsi-food-map.yourdomain.com
    secretName: tapsi-app-tls-secret
  rules:
  - host: tapsi-food-map.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
  - host: www.tapsi-food-map.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80

---
# Monitoring ingress for Grafana and Prometheus (internal access only)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: tapsi-food-map
  labels:
    app.kubernetes.io/name: monitoring-ingress
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: tapsi-food-map
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Restrict to internal IPs only
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    # Basic authentication for additional security
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - Monitoring"
    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - grafana.tapsi-food-map.yourdomain.com
    - prometheus.tapsi-food-map.yourdomain.com
    secretName: monitoring-tls-secret
  rules:
  - host: grafana.tapsi-food-map.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
  - host: prometheus.tapsi-food-map.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090

---
# Celery Flower monitoring ingress (internal access only)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: celery-flower-ingress
  namespace: tapsi-food-map
  labels:
    app.kubernetes.io/name: celery-flower-ingress
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: tapsi-food-map
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Restrict to internal IPs only
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - flower.tapsi-food-map.yourdomain.com
    secretName: flower-tls-secret
  rules:
  - host: flower.tapsi-food-map.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: celery-flower-service
            port:
              number: 5555

---
# Secret for monitoring basic auth
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-basic-auth
  namespace: tapsi-food-map
  labels:
    app.kubernetes.io/name: monitoring-basic-auth
    app.kubernetes.io/component: auth
type: Opaque
data:
  # Generated with: htpasswd -nb admin your_password | base64
  # Default: admin:monitoring_password
  # Replace with your own credentials
  auth: YWRtaW46JGFwcjEkZVBQZ0lmRXokLkw3L0RRdkE5WXF1SzhEZ3lTUC8u