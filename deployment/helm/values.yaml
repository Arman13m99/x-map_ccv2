# values.yaml - Default values for Tapsi Food Map Dashboard Helm chart
# This is a YAML-formatted file.
# Declare variables to be substituted into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "standard"

# Application configuration
app:
  name: tapsi-food-map
  image:
    registry: docker.io
    repository: tapsi-food-map
    tag: "2.0.0"
    pullPolicy: IfNotPresent
  
  # Replica configuration
  replicaCount: 3
  
  # Service configuration
  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
    annotations: {}
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  # Autoscaling configuration
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
  
  # Security context
  securityContext:
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    fsGroup: 1001
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health/ready
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  startupProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30

# Nginx proxy configuration
nginx:
  enabled: true
  replicaCount: 2
  image:
    registry: docker.io
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: LoadBalancer
    port: 80
    httpsPort: 443
    annotations: {}
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Configuration
  config:
    workerProcesses: "auto"
    workerConnections: 4096
    clientMaxBodySize: "16m"
    keepaliveTimeout: 65

# Celery worker configuration
celery:
  worker:
    enabled: true
    replicaCount: 2
    concurrency: 4
    maxTasksPerChild: 100
    prefetchMultiplier: 1
    
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  
  beat:
    enabled: true
    replicaCount: 1
    
    resources:
      limits:
        cpu: 250m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
  
  flower:
    enabled: true
    replicaCount: 1
    port: 5555
    basicAuth:
      enabled: true
      username: admin
      password: flower_password
    
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Database configuration (using Bitnami PostgreSQL chart)
postgresql:
  enabled: true
  auth:
    postgresPassword: "secure_production_password"
    username: "tapsi_user"
    password: "secure_production_password"
    database: "tapsi_food_map"
  
  architecture: standalone
  
  primary:
    persistence:
      enabled: true
      storageClass: ""
      size: 50Gi
    
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
    # PostGIS extension
    initdb:
      scripts:
        01-postgis.sql: |
          CREATE EXTENSION IF NOT EXISTS postgis;
          CREATE EXTENSION IF NOT EXISTS postgis_topology;

# Redis configuration (using Bitnami Redis chart)
redis:
  enabled: true
  auth:
    enabled: false
  
  architecture: standalone
  
  master:
    persistence:
      enabled: true
      storageClass: ""
      size: 10Gi
    
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  
  # Redis configuration
  commonConfiguration: |-
    # Network
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 300
    tcp-keepalive 60
    
    # Memory management
    maxmemory 400mb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000

# Monitoring configuration
monitoring:
  enabled: true
  
  # Prometheus configuration (using Prometheus Community chart)
  prometheus:
    enabled: true
    server:
      retention: "30d"
      persistentVolume:
        enabled: true
        size: 50Gi
        storageClass: ""
      
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
    
    # AlertManager (optional)
    alertmanager:
      enabled: false
  
  # Grafana configuration (using Grafana chart)
  grafana:
    enabled: true
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
    
    adminUser: admin
    adminPassword: secure_grafana_password
    
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    
    # Default data sources
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
        - name: Prometheus
          type: prometheus
          url: http://{{ include "tapsi-food-map.fullname" . }}-prometheus-server:80
          access: proxy
          isDefault: true

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: tapsi-food-map.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
    - host: www.tapsi-food-map.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  
  tls:
    - secretName: tapsi-app-tls
      hosts:
        - tapsi-food-map.yourdomain.com
        - www.tapsi-food-map.yourdomain.com

# Monitoring ingress (separate for security)
monitoringIngress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    grafana:
      host: grafana.tapsi-food-map.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
    prometheus:
      host: prometheus.tapsi-food-map.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
    flower:
      host: flower.tapsi-food-map.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  
  tls:
    - secretName: monitoring-tls
      hosts:
        - grafana.tapsi-food-map.yourdomain.com
        - prometheus.tapsi-food-map.yourdomain.com
        - flower.tapsi-food-map.yourdomain.com

# Persistent storage configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 5Gi

# Network policies
networkPolicy:
  enabled: true
  allowExternal: true

# Service account and RBAC
serviceAccount:
  create: true
  annotations: {}
  name: ""

rbac:
  create: true

# Pod security policies
podSecurityPolicy:
  enabled: false

# Application configuration
config:
  # Flask settings
  flask:
    env: "production"
    debug: false
    host: "0.0.0.0"
    port: 5000
    workers: 4
    timeout: 120
  
  # Database settings
  database:
    name: "tapsi_food_map"
    username: "tapsi_user"
    # Password will be set via secret
  
  # Cache settings
  cache:
    ttl: 3600
    chunkSize: 100000
    workerCount: 10
    pageSize: 100000
  
  # Metabase settings
  metabase:
    url: "https://metabase.ofood.cloud"
    team: "growth"
    orderDataQuestionId: "5822"
    vendorDataQuestionId: "5045"
    # Credentials will be set via secret
  
  # Performance settings
  performance:
    cacheEnabled: true
    cacheTtl: 3600
    chunkSize: 100000
    workerCount: 10
  
  # Security settings
  security:
    corsOrigins: "https://yourdomain.com,https://www.yourdomain.com"
    trustedProxies: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"

# Secrets configuration (these should be overridden in production)
secrets:
  secretKey: "your-super-secret-production-key-change-this"
  dbPassword: "secure_production_password"
  metabaseUsername: "your-metabase-username"
  metabasePassword: "your-metabase-password"
  redisPassword: ""
  grafanaAdminPassword: "secure_grafana_password"

# Node selector, tolerations and affinity
nodeSelector: {}
tolerations: []
affinity: {}

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "5000"
  prometheus.io/path: "/health/metrics"

# Labels to add to all resources
commonLabels:
  app.kubernetes.io/name: tapsi-food-map
  app.kubernetes.io/instance: tapsi-food-map
  app.kubernetes.io/version: "2.0.0"
  app.kubernetes.io/managed-by: Helm